// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: para_transferi.sql

package db

import (
	"context"
)

const transferOlustur = `-- name: TransferOlustur :one
INSERT INTO para_transferi (
  gonderen_iban,
  alan_iban,
  mikdar
) VALUES (
  $1, $2, $3
) RETURNING id, gonderen_iban, alan_iban, mikdar, olusturma_tarihi
`

type TransferOlusturParams struct {
	GonderenIban int64 `json:"gonderen_iban"`
	AlanIban     int64 `json:"alan_iban"`
	Mikdar       int64 `json:"mikdar"`
}

func (q *Queries) TransferOlustur(ctx context.Context, arg TransferOlusturParams) (ParaTransferi, error) {
	row := q.db.QueryRowContext(ctx, transferOlustur, arg.GonderenIban, arg.AlanIban, arg.Mikdar)
	var i ParaTransferi
	err := row.Scan(
		&i.ID,
		&i.GonderenIban,
		&i.AlanIban,
		&i.Mikdar,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const transferiGetir = `-- name: TransferiGetir :one
SELECT id, gonderen_iban, alan_iban, mikdar, olusturma_tarihi FROM para_transferi
WHERE id = $1 LIMIT 1
`

func (q *Queries) TransferiGetir(ctx context.Context, id int64) (ParaTransferi, error) {
	row := q.db.QueryRowContext(ctx, transferiGetir, id)
	var i ParaTransferi
	err := row.Scan(
		&i.ID,
		&i.GonderenIban,
		&i.AlanIban,
		&i.Mikdar,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const transferleriListele = `-- name: TransferleriListele :many
SELECT id, gonderen_iban, alan_iban, mikdar, olusturma_tarihi FROM para_transferi
WHERE 
    gonderen_iban = $1 OR
    alan_iban = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type TransferleriListeleParams struct {
	GonderenIban int64 `json:"gonderen_iban"`
	AlanIban     int64 `json:"alan_iban"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) TransferleriListele(ctx context.Context, arg TransferleriListeleParams) ([]ParaTransferi, error) {
	rows, err := q.db.QueryContext(ctx, transferleriListele,
		arg.GonderenIban,
		arg.AlanIban,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ParaTransferi{}
	for rows.Next() {
		var i ParaTransferi
		if err := rows.Scan(
			&i.ID,
			&i.GonderenIban,
			&i.AlanIban,
			&i.Mikdar,
			&i.OlusturmaTarihi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
