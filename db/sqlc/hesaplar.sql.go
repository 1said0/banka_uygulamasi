
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: hesaplar.sql

package db

import (
	"context"
	"database/sql"
)

const güncelHesabıGetir = `-- name: GüncelHesabıGetir :one
SELECT id, iban, hesap_sahibi_ismi, bakiye, para_birimi, olusturma_tarihi FROM hesaplar
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GüncelHesabıGetir(ctx context.Context, id int64) (Hesaplar, error) {
	row := q.db.QueryRowContext(ctx, güncelHesabıGetir, id)
	var i Hesaplar
	err := row.Scan(
		&i.ID,
		&i.Iban,
		&i.HesapSahibiIsmi,
		&i.Bakiye,
		&i.ParaBirimi,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const hesabaParaekle = `-- name: HesabaParaekle :one
UPDATE hesaplar
SET bakiye = bakiye + $1
WHERE iban= $2
RETURNING id, iban, hesap_sahibi_ismi, bakiye, para_birimi, olusturma_tarihi
`

type HesabaParaekleParams struct {
	Bakiye int64         `json:"bakiye"`
	Iban   sql.NullInt64 `json:"iban"`
}

func (q *Queries) HesabaParaekle(ctx context.Context, arg HesabaParaekleParams) (Hesaplar, error) {
	row := q.db.QueryRowContext(ctx, hesabaParaekle, arg.Bakiye, arg.Iban)
	var i Hesaplar
	err := row.Scan(
		&i.ID,
		&i.Iban,
		&i.HesapSahibiIsmi,
		&i.Bakiye,
		&i.ParaBirimi,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const hesabıGetir = `-- name: HesabıGetir :one
SELECT id, iban, hesap_sahibi_ismi, bakiye, para_birimi, olusturma_tarihi FROM hesaplar
WHERE iban = $1 LIMIT 1
`

func (q *Queries) HesabıGetir(ctx context.Context, iban sql.NullInt64) (Hesaplar, error) {
	row := q.db.QueryRowContext(ctx, hesabıGetir, iban)
	var i Hesaplar
	err := row.Scan(
		&i.ID,
		&i.Iban,
		&i.HesapSahibiIsmi,
		&i.Bakiye,
		&i.ParaBirimi,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const hesabıGüncelle = `-- name: HesabıGüncelle :one
UPDATE hesaplar
SET bakiye = $2
WHERE id = $1
RETURNING id, iban, hesap_sahibi_ismi, bakiye, para_birimi, olusturma_tarihi
`

type HesabıGüncelleParams struct {
	ID     int64 `json:"id"`
	Bakiye int64 `json:"bakiye"`
}

func (q *Queries) HesabıGüncelle(ctx context.Context, arg HesabıGüncelleParams) (Hesaplar, error) {
	row := q.db.QueryRowContext(ctx, hesabıGüncelle, arg.ID, arg.Bakiye)
	var i Hesaplar
	err := row.Scan(
		&i.ID,
		&i.Iban,
		&i.HesapSahibiIsmi,
		&i.Bakiye,
		&i.ParaBirimi,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const hesabıSil = `-- name: HesabıSil :exec
DELETE FROM hesaplar
WHERE iban = $1
`

func (q *Queries) HesabıSil(ctx context.Context, iban sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, hesabıSil, iban)
	return err
}

const hesapOlustur = `-- name: HesapOlustur :one
INSERT INTO hesaplar (
  hesap_sahibi_ismi,
  bakiye,
  para_birimi
) VALUES (
  $1, $2, $3
) RETURNING id, iban, hesap_sahibi_ismi, bakiye, para_birimi, olusturma_tarihi
`

type HesapOlusturParams struct {
	HesapSahibiIsmi string `json:"hesap_sahibi_ismi"`
	Bakiye          int64  `json:"bakiye"`
	ParaBirimi      string `json:"para_birimi"`
}

func (q *Queries) HesapOlustur(ctx context.Context, arg HesapOlusturParams) (Hesaplar, error) {
	row := q.db.QueryRowContext(ctx, hesapOlustur, arg.HesapSahibiIsmi, arg.Bakiye, arg.ParaBirimi)
	var i Hesaplar
	err := row.Scan(
		&i.ID,
		&i.Iban,
		&i.HesapSahibiIsmi,
		&i.Bakiye,
		&i.ParaBirimi,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const hesaplarıGetir = `-- name: HesaplarıGetir :many
SELECT id, iban, hesap_sahibi_ismi, bakiye, para_birimi, olusturma_tarihi FROM hesaplar
ORDER BY id
LIMIT $1
OFFSET $2
`

type HesaplarıGetirParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) HesaplarıGetir(ctx context.Context, arg HesaplarıGetirParams) ([]Hesaplar, error) {
	rows, err := q.db.QueryContext(ctx, hesaplarıGetir, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Hesaplar{}
	for rows.Next() {
		var i Hesaplar
		if err := rows.Scan(
			&i.ID,
			&i.Iban,
			&i.HesapSahibiIsmi,
			&i.Bakiye,
			&i.ParaBirimi,
			&i.OlusturmaTarihi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
