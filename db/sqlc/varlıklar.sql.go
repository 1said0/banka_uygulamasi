// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: varlıklar.sql

package db

import (
	"context"
)

const varlıkGetir = `-- name: VarlıkGetir :one
SELECT id, hesap_iban, bakiye, olusturma_tarihi FROM varlıklar
WHERE id = $1 LIMIT 1
`

func (q *Queries) VarlıkGetir(ctx context.Context, id int64) (Varlıklar, error) {
	row := q.db.QueryRowContext(ctx, varlıkGetir, id)
	var i Varlıklar
	err := row.Scan(
		&i.ID,
		&i.HesapIban,
		&i.Bakiye,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const varlıkOlustur = `-- name: VarlıkOlustur :one
INSERT INTO varlıklar (
 hesap_iban,
  bakiye
) VALUES (
  $1, $2
) RETURNING id, hesap_iban, bakiye, olusturma_tarihi
`

type VarlıkOlusturParams struct {
	HesapIban int64 `json:"hesap_iban"`
	Bakiye    int64 `json:"bakiye"`
}

func (q *Queries) VarlıkOlustur(ctx context.Context, arg VarlıkOlusturParams) (Varlıklar, error) {
	row := q.db.QueryRowContext(ctx, varlıkOlustur, arg.HesapIban, arg.Bakiye)
	var i Varlıklar
	err := row.Scan(
		&i.ID,
		&i.HesapIban,
		&i.Bakiye,
		&i.OlusturmaTarihi,
	)
	return i, err
}

const varlıklarıListele = `-- name: VarlıklarıListele :many
SELECT id, hesap_iban, bakiye, olusturma_tarihi FROM varlıklar
WHERE  hesap_iban = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type VarlıklarıListeleParams struct {
	HesapIban int64 `json:"hesap_iban"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) VarlıklarıListele(ctx context.Context, arg VarlıklarıListeleParams) ([]Varlıklar, error) {
	rows, err := q.db.QueryContext(ctx, varlıklarıListele, arg.HesapIban, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Varlıklar{}
	for rows.Next() {
		var i Varlıklar
		if err := rows.Scan(
			&i.ID,
			&i.HesapIban,
			&i.Bakiye,
			&i.OlusturmaTarihi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
